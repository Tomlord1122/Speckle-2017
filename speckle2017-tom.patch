diff --git a/gen_binaries.sh b/gen_binaries.sh
index 8f19fa4..082b1cf 100755
--- a/gen_binaries.sh
+++ b/gen_binaries.sh
@@ -11,7 +11,7 @@ if [ -z  "$SPEC_DIR" ]; then
 fi
 
 # NB: Use the same name in the config "label" as the config filename. See line 33 *.cfg
-CONFIG=riscv
+CONFIG=riscv_tom_debug
 CONFIGFILE=${CONFIG}.cfg
 
 # The config used to compile for the host machine
@@ -28,11 +28,18 @@ genCommandsFlag=false
 
 # intrate, fprate, intspeed, fpspeed
 # Supersets spec{speed,rate}, and all, are not supported
-suite_type=intspeed
+suite_type=intrate
 
 # ref, train, test
 input_type=ref
 
+# Add these variables at the beginning of the script, after the initial variable declarations
+QEMU_PATH="/opt/qemu/bin/qemu-riscv64"
+RISCV_SYSROOT="/opt/riscv/sysroot"
+QEMU_CPU="rv64,v=true,zba=true,zbb=true,zbs=true,vlen=128,vext_spec=v1.0"
+PLUGIN_PATH="/home/tomlord/workspace/Speckle-2017"  # Adjust this to the actual path of your plugin files
+LOG_DIR="$build_dir/logs"  # Directory for storing execution logs
+
 function usage
 {
     echo "usage: gen_binaries.sh [--compile | --genCommands] [-H | -h | --help] [--suite [intspeed | intrate | fpspeed | fprate] | --input [train | test | ref]]"
@@ -114,7 +121,7 @@ if [ "$compileFlag" = true ]; then
       --action runsetup ${suite_type} > ${build_dir}/${H_CONFIG}-${suite_type}-build.log
 
    for b in ${benchmarks[@]}; do
-      output_dir=${overlay_dir}/${suite_type}/${input_type}/$b
+      output_dir=${overlay_dir}/${CONFIG}/${suite_type}/${input_type}/$b
       mkdir -p $output_dir
       bmark_base_dir=$SPEC_DIR/benchspec/CPU/$b
       unprefixed=${b:4}
@@ -144,6 +151,7 @@ if [ "$compileFlag" = true ]; then
       run_script=${output_dir}/run.sh
       echo "#!/bin/bash" > ${run_script}
       echo "#This script was generated by Speckle gen_binaries.sh" >> ${run_script}
+      echo "mkdir -p ./logs" >> ${run_script}
 
       IFS=$'\n' read -d '' -r -a commands < $build_dir/../commands/$suite_type/${b}.${input_type}.cmd
       workload_idx=0
@@ -154,8 +162,17 @@ if [ "$compileFlag" = true ]; then
             fi
             workload_run_script=${output_dir}/run_workload${workload_idx}.sh
             echo "#!/bin/bash" > ${workload_run_script}
-            message="echo 'Running: ./$(basename "${target_bin}") ${input}'"
-            cmd="./$(basename "${target_bin}") ${input}"
+            
+            # Construct the QEMU command
+            qemu_cmd="${QEMU_PATH} -L ${RISCV_SYSROOT} -cpu ${QEMU_CPU}"
+            qemu_cmd+=" -d plugin,in_asm"
+            qemu_cmd+=" -plugin ${PLUGIN_PATH}/insn.so"
+            qemu_cmd+=" -D ./logs/${b}_workload${workload_idx}.log"
+            
+            # Add the actual command
+            message="echo 'Running: ${qemu_cmd} ./$(basename "${target_bin}") ${input}'"
+            cmd="${qemu_cmd} ./$(basename "${target_bin}") ${input}"
+            
             echo "$message" >> ${run_script}
             echo "$message" >> ${workload_run_script}
             echo "$cmd" >> ${run_script}
@@ -167,7 +184,7 @@ if [ "$compileFlag" = true ]; then
       chmod +x $run_script
    done
    # Copy the master runscript into the overlay directory
-   cp ${build_dir}/../spec17-run-scripts/${suite_type}.sh ${overlay_dir}/${suite_type}/${input_type}
+   cp ${build_dir}/../spec17-run-scripts/${suite_type}.sh ${overlay_dir}/${CONFIG}/${suite_type}/${input_type}
 
 fi
 
diff --git a/host.cfg b/host.cfg
index 702504d..1c22366 100644
--- a/host.cfg
+++ b/host.cfg
@@ -111,20 +111,18 @@ intspeed,fpspeed:
 #------- Compilers ------------------------------------------------------------
 default:
 #                    EDIT: the directory where your compiler is installed
-%ifndef %{gcc_dir}
-%   define  gcc_dir        %{/usr/}
-%endif
+
 
 # EDIT if needed: the preENV line adds library directories to the runtime
 #      path.  You can adjust it, or add lines for other environment variables. 
 #      See: https://www.spec.org/cpu2017/Docs/config.html#preenv
 #      and: https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html
-   preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64/:%{gcc_dir}/lib/:/lib64
-  #preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64/:%{gcc_dir}/lib/:/lib64:%{ENV_LD_LIBRARY_PATH}
-   SPECLANG                = %{gcc_dir}/bin/
-   CC                      = $(SPECLANG)gcc     -std=c99   %{model}
-   CXX                     = $(SPECLANG)g++                %{model}
-   FC                      = $(SPECLANG)gfortran           %{model}
+   preENV_LD_LIBRARY_PATH  = /usr/lib64/:/usr/lib/:/lib64
+  #preENV_LD_LIBRARY_PATH  = /usr/lib64/:/usr/lib/:/lib64:%{ENV_LD_LIBRARY_PATH}
+   SPECLANG                = /usr/bin/
+   CC                      = $(SPECLANG)gcc     -std=c99   %{model} -fno-strict-aliasing -D_DEFAULT_SOURCE -U_FORTIFY_SOURCE
+   CXX                     = $(SPECLANG)g++                %{model} -fno-strict-aliasing -D_DEFAULT_SOURCE -U_FORTIFY_SOURCE
+   FC                      = $(SPECLANG)gfortran           %{model} -fno-strict-aliasing -D_DEFAULT_SOURCE -U_FORTIFY_SOURCE
    # How to say "Show me your version, please"
    CC_VERSION_OPTION       = -v
    CXX_VERSION_OPTION      = -v
diff --git a/riscv.cfg b/riscv.cfg
deleted file mode 100644
index a4439ba..0000000
--- a/riscv.cfg
+++ /dev/null
@@ -1,321 +0,0 @@
-#------------------------------------------------------------------------------
-# SPEC CPU2017 config file for: gcc / g++ / gfortran on Linux ARM systems
-#------------------------------------------------------------------------------
-# 
-# Usage: (1) Copy this to a new name
-#             cd $SPEC/config
-#             cp Example-x.cfg myname.cfg
-#        (2) Change items that are marked 'EDIT' (search for it)
-# 
-# SPEC tested this config file with:
-#    Compiler version(s):    5.3, 6.2
-#    Operating system(s):    Ubuntu 16.04
-#    Hardware:               Cavium ThunderX, HPE Moonshot
-#
-# If your system differs, this config file might not work.
-# You might find a better config file at http://www.spec.org/cpu2017/results
-#
-# Known Limitations 
-#     It is possible that you might encounter compile time or run time errors 
-#     with older versions of GCC (for example, 4.x)
-#     Recommendation: Use a newer version of the compiler.
-#                     If that is not possible, try reducing the optimization. 
-#
-#
-# Compiler issues: Contact your compiler vendor, not SPEC.
-# For SPEC help:   http://www.spec.org/cpu2017/Docs/techsupport.html
-#------------------------------------------------------------------------------
-
-
-#--------- Label --------------------------------------------------------------
-# Arbitrary string to tag binaries 
-#                  Two Suggestions: # (1) EDIT this label as you try new ideas.
-%define label riscv                # (2)      Use a label meaningful to *you*.
-
-
-#--------- Preprocessor -------------------------------------------------------
-%ifndef %{bits}                # EDIT to control 32 or 64 bit compilation.  Or, 
-%   define  bits        64     #      you can set it on the command line using:
-%endif                         #      'runcpu --define bits=nn'
-
-%ifndef %{build_ncpus}         # EDIT to adjust number of simultaneous compiles.
-%   define  build_ncpus  8     #      Or, you can set it on the command line: 
-%endif                         #      'runcpu --define build_ncpus=nn'
-
-# Don't change this part.
-%define    os           LINUX
-%if %{bits} == 64
-%   define model      -march=rv64imafd  -mabi=lp64d
-%elif %{bits} == 32
-%   define model        -mabi=ilp32 #untested
-%else
-%   error Please define number of bits - see instructions in config file
-%endif
-
-
-
-#--------- Global Settings ----------------------------------------------------
-# For info, see:
-#            https://www.spec.org/cpu2017/Docs/config.html#fieldname   
-#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune
-
-command_add_redirect = 1
-flagsurl             = $[top]/config/flags/gcc.xml
-ignore_errors        = 1
-iterations           = 1
-label                = %{label}-%{bits}
-line_width           = 1020
-log_line_width       = 1020
-makeflags            = --jobs=%{build_ncpus} 
-mean_anyway          = 1
-output_format        = txt,html,cfg,pdf,csv
-preenv               = 1
-reportable           = 0
-tune                 = base
-
-
-#--------- How Many CPUs? -----------------------------------------------------
-# Both SPECrate and SPECspeed can test multiple chips / cores / hw threads
-#    - For SPECrate,  you set the number of copies.
-#    - For SPECspeed, you set the number of threads. 
-# See: https://www.spec.org/cpu2017/Docs/system-requirements.html#MultipleCPUs
-#
-#    q. How many should I set?  
-#    a. Unknown, you will have to try it and see!
-#
-# To get you started, some suggestions:
-#
-#     copies - This config file defaults to testing only 1 copy.   You might
-#              try changing it to match the number of cores on your system, 
-#              or perhaps the number of virtual CPUs as reported by:
-#                     grep -c processor /proc/cpuinfo
-#              Be sure you have enough memory.  See:
-#              https://www.spec.org/cpu2017/Docs/system-requirements.html#memory
-#
-#     threads - This config file sets a starting point.  You could try raising 
-#               it.  A higher thread count is much more likely to be useful for
-#               fpspeed than for intspeed.
-#
-intrate,fprate:
-   copies           = 1   # EDIT to change number of copies (see above)
-intspeed,fpspeed:
-   threads          = 1   # EDIT to change number of OpenMP threads (see above)
-
-
-#------- Compilers ------------------------------------------------------------
-default:
-#                    EDIT: the directory where your compiler is installed
-%ifndef %{gcc_dir}
-%   define  gcc_dir           %{ENV_RISCV}
-%endif
-
-# EDIT if needed: the preENV line adds library directories to the runtime
-#      path.  You can adjust it, or add lines for other environment variables. 
-#      See: https://www.spec.org/cpu2017/Docs/config.html#preenv
-#      and: https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html
-   preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64/:%{gcc_dir}/lib/:/lib64
-  #preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64/:%{gcc_dir}/lib/:/lib64:%{ENV_LD_LIBRARY_PATH}
-   SPECLANG                = %{gcc_dir}/bin/
-   CC                      = $(SPECLANG)riscv64-unknown-linux-gnu-gcc             -std=c99   %{model} -static
-   CXX                     = $(SPECLANG)riscv64-unknown-linux-gnu-g++                %{model} -static
-   FC                      = $(SPECLANG)riscv64-unknown-linux-gnu-gfortran           %{model} -static
-   # How to say "Show me your version, please"
-   CC_VERSION_OPTION       = -v
-   CXX_VERSION_OPTION      = -v
-   FC_VERSION_OPTION       = -v
-
-default:
-%if %{bits} == 64
-   sw_base_ptrsize = 64-bit
-   sw_peak_ptrsize = 64-bit
-%else
-   sw_base_ptrsize = 32-bit
-   sw_peak_ptrsize = 32-bit
-%endif
-
-
-#--------- Portability --------------------------------------------------------
-default:   # data model applies to all benchmarks
-%if %{bits} == 32
-    # Strongly recommended because at run-time, operations using modern file 
-    # systems may fail spectacularly and frequently (or, worse, quietly and 
-    # randomly) if a program does not accommodate 64-bit metadata.
-    EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
-%else
-    EXTRA_PORTABILITY = -DSPEC_LP64
-%endif
-
-# Benchmark-specific portability (ordered by last 2 digits of bmark number)
-
-# BIANCOLIN - Sketchy. You can everything manually but if this works...
-500.perlbench_r,600.perlbench_s:  #lang='C' #
-%if %{bits} == 32
-%   define suffix IA32 # Untested
-%else
-%   define suffix X64 # Matches 2006 config
-%endif
-   PORTABILITY    = -DSPEC_%{os}_%{suffix} -D_DEFAULT_SOURCE 
-   #Biancolin Hack: DEFAULT_SOURCE only became necessary after we bumped to glibc 2.26, why?
-
-521.wrf_r,621.wrf_s:  #lang='F,C'
-   CPORTABILITY  = -DSPEC_CASE_FLAG 
-   FPORTABILITY  = -fconvert=big-endian
-
-523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
-   PORTABILITY   = -DSPEC_%{os}
-
-526.blender_r:  #lang='CXX,C'
-   PORTABILITY   = -funsigned-char -DSPEC_LINUX
-
-527.cam4_r,627.cam4_s:  #lang='F,C'
-   PORTABILITY   = -DSPEC_CASE_FLAG
-
-628.pop2_s:  #lang='F,C'
-   PORTABILITY   = -DSPEC_CASE_FLAG
-   FPORTABILITY  = -fconvert=big-endian
-
-
-#-------- Tuning Flags common to Base and Peak --------------------------------
-
-#
-# Speed (OpenMP and Autopar allowed)
-#
-%if %{bits} == 32
-   intspeed,fpspeed:
-   #
-   # Many of the speed benchmarks (6nn.benchmark_s) do not fit in 32 bits
-   # If you wish to run SPECint2017_speed or SPECfp2017_speed, please use
-   #
-   #     runcpu --define bits=64
-   #
-   fail_build = 1
-%else
-   intspeed,fpspeed:
-      EXTRA_OPTIMIZE = -fopenmp -DSPEC_OPENMP
-   fpspeed:
-      #
-      # 627.cam4 needs a big stack; the preENV will apply it to all 
-      # benchmarks in the set, as required by the rules.  
-      #
-      preENV_OMP_STACKSIZE = 120M
-%endif
-
-
-#--------  Baseline Tuning Flags ----------------------------------------------
-#
-default=base:         # flags for all base 
-   OPTIMIZE         = -O3
-
-intrate,intspeed=base: # flags for integer base
-%if %{bits} == 32                    
-    EXTRA_COPTIMIZE = -fgnu89-inline -fno-strict-aliasing 
-%else                                
-    EXTRA_COPTIMIZE = -fno-strict-aliasing 
-    LDCFLAGS        = -z muldefs     
-%endif
-# Notes about the above
-#  - 500.perlbench_r/600.perlbench_s needs -fno-strict-aliasing.
-#  - 502.gcc_r/602.gcc_s             needs -fgnu89-inline or -z muldefs
-#  - For 'base', all benchmarks in a set must use the same options.   
-#  - Therefore, all base benchmarks get the above.  See:
-#       www.spec.org/cpu2017/Docs/runrules.html#BaseFlags  
-#       www.spec.org/cpu2017/Docs/benchmarks/500.perlbench_r.html
-#       www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html
-
-
-#--------  Peak Tuning Flags ----------------------------------------------
-default=peak:
-   basepeak = yes  # if you develop some peak tuning, remove this line.
-   #
-   # -----------------------
-   # About the -fno switches
-   # -----------------------
-   #
-   # For 'base', this config file (conservatively) disables some optimizations.
-   # You might want to try turning some of them back on, by creating a 'peak' 
-   # section here, with individualized benchmark options:
-   #
-   #        500.perlbench_r=peak:
-   #           OPTIMIZE = this
-   #        502.gcc_r=peak:
-   #           OPTIMIZE = that 
-   #        503.bwaves_r=peak:
-   #           OPTIMIZE = other   .....(and so forth)
-   #
-   # If you try it:
-   #   - You must remove the 'basepeak' option, above.
-   #   - You will need time and patience, to diagnose and avoid any errors.
-   #   - perlbench is unlikely to work with strict aliasing 
-   #   - Some floating point benchmarks may get wrong answers, depending on:
-   #         the particular chip 
-   #         the version of GCC 
-   #         other optimizations enabled
-   #         -m32 vs. -m64
-   #   - See: http://www.spec.org/cpu2017/Docs/config.html
-   #   - and: http://www.spec.org/cpu2017/Docs/runrules.html
-
-
-#------------------------------------------------------------------------------
-# Tester and System Descriptions - EDIT all sections below this point              
-#------------------------------------------------------------------------------
-#   For info about any field, see
-#             https://www.spec.org/cpu2017/Docs/config.html#fieldname 
-#   Example:  https://www.spec.org/cpu2017/Docs/config.html#hw_memory  
-#-------------------------------------------------------------------------------
-
-#--------- EDIT to match your version -----------------------------------------
-default:
-   sw_compiler001   = C/C++/Fortran: Version 6.2.0 of GCC, the
-   sw_compiler002   = GNU Compiler Collection
-
-#--------- EDIT info about you ------------------------------------------------
-# To understand the difference between hw_vendor/sponsor/tester, see:
-#     https://www.spec.org/cpu2017/Docs/config.html#test_sponsor
-intrate,intspeed,fprate,fpspeed: # Important: keep this line
-intrate,intspeed,fprate,fpspeed: # Important: keep this line
-   hw_vendor          = My Corporation
-   tester             = My Corporation
-   test_sponsor       = My Corporation
-   license_num        = nnn (Your SPEC license number) 
-#  prepared_by        = # Ima Pseudonym                       # Whatever you like: is never output
-
-
-#--------- EDIT system availability dates -------------------------------------
-intrate,intspeed,fprate,fpspeed: # Important: keep this line
-                        # Example                             # Brief info about field
-   hw_avail           = # Nov-2099                            # Date of LAST hardware component to ship
-   sw_avail           = # Nov-2099                            # Date of LAST software component to ship
-
-#--------- EDIT system information --------------------------------------------
-intrate,intspeed,fprate,fpspeed: # Important: keep this line
-                        # Example                             # Brief info about field
- # hw_cpu_name        = # Intel Xeon E9-9999 v9               # chip name
-   hw_cpu_nominal_mhz = # 9999                                # Nominal chip frequency, in MHz
-   hw_cpu_max_mhz     = # 9999                                # Max chip frequency, in MHz
- # hw_disk            = # 9 x 9 TB SATA III 9999 RPM          # Size, type, other perf-relevant info
-   hw_model           = # TurboBlaster 3000                   # system model name
- # hw_nchips          = # 99                                  # number chips enabled
-   hw_ncores          = # 9999                                # number cores enabled
-   hw_ncpuorder       = # 1-9 chips                           # Ordering options
-   hw_nthreadspercore = # 9                                   # number threads enabled per core
-   hw_other           = # TurboNUMA Router 10 Gb              # Other perf-relevant hw, or "None"
-
-#  hw_memory001       = # 999 GB (99 x 9 GB 2Rx4 PC4-2133P-R, # The 'PCn-etc' is from the JEDEC 
-#  hw_memory002       = # running at 1600 MHz)                # label on the DIMM.
-
-   hw_pcache          = # 99 KB I + 99 KB D on chip per core  # Primary cache size, type, location
-   hw_scache          = # 99 KB I+D on chip per 9 cores       # Second cache or "None"
-   hw_tcache          = # 9 MB I+D on chip per chip           # Third  cache or "None"
-   hw_ocache          = # 9 GB I+D off chip per system board  # Other cache or "None"
-
-   fw_bios            = # American Megatrends 39030100 02/29/2016 # Firmware information
- # sw_file            = # ext99                               # File system
- # sw_os001           = # Linux Sailboat                      # Operating system
- # sw_os002           = # Distribution 7.2 SP1                # and version
-   sw_other           = # TurboHeap Library V8.1              # Other perf-relevant sw, or "None"
- # sw_state           = # Run level 99                        # Software state.
-
-# Note: Some commented-out fields above are automatically set to preliminary 
-# values by sysinfo
-#       https://www.spec.org/cpu2017/Docs/config.html#sysinfo
-# Uncomment lines for which you already know a better answer than sysinfo 
diff --git a/run.sh b/run.sh
deleted file mode 100755
index 5cf621a..0000000
--- a/run.sh
+++ /dev/null
@@ -1,40 +0,0 @@
-#!/bin/bash
-
-TARGET_RUN="spike pk -c"
-INPUT_TYPE=test # THIS MUST BE ON LINE 4 for an external sed command to work!
-                # this allows us to externally set the INPUT_TYPE this script will execute
-
-BENCHMARKS=(400.perlbench 401.bzip2 403.gcc 429.mcf 445.gobmk 456.hmmer 458.sjeng 462.libquantum 464.h264ref 471.omnetpp 473.astar 483.xalancbmk)
-
-base_dir=$PWD
-for b in ${BENCHMARKS[@]}; do
-
-   echo " -== ${b} ==-"
-   mkdir -p ${base_dir}/output
-
-   cd ${base_dir}/${b}
-   SHORT_EXE=${b##*.} # cut off the numbers ###.short_exe
-   if [ $b == "483.xalancbmk" ]; then 
-      SHORT_EXE=Xalan #WTF SPEC???
-   fi
-   
-   # read the command file
-   IFS=$'\n' read -d '' -r -a commands < ${base_dir}/commands/${b}.${INPUT_TYPE}.cmd
-
-   # run each workload
-   count=0
-   for input in "${commands[@]}"; do
-      if [[ ${input:0:1} != '#' ]]; then # allow us to comment out lines in the cmd files
-         cmd="${TARGET_RUN} ${SHORT_EXE} ${input} > ${base_dir}/output/${SHORT_EXE}.${count}.out"
-         echo "workload=[${cmd}]"
-         eval ${cmd}
-         ((count++))
-      fi
-   done
-   echo ""
-
-done
-
-
-echo ""
-echo "Done!"
diff --git a/spec17-run-scripts/intspeed.sh b/spec17-run-scripts/intspeed.sh
index 3b9e89c..c082916 100755
--- a/spec17-run-scripts/intspeed.sh
+++ b/spec17-run-scripts/intspeed.sh
@@ -6,21 +6,17 @@ counters=0
 
 function usage
 {
-    echo "usage: intspeed.sh <benchmark-name> [-H | -h | --help] [--threads <int>] [--workload <int>]"
-    echo "   benchmark-name: the spec17 run directory with binary and inputs"
+    echo "usage: intspeed.sh [-H | -h | --help] [--threads <int>] [--workload <int>]"
     echo "   threads: number of OpenMP threads to use. Default: ${num_threads}"
     echo "   workload: which workload number to run. Leaving this unset runs all."
     echo "   counters: if set, runs an hpm_counters instance on each hart"
 }
 
-if [ $# -eq 0 -o "$1" == "--help" -o "$1" == "-h" -o "$1" == "-H" ]; then
+if [ "$1" == "--help" -o "$1" == "-h" -o "$1" == "-H" ]; then
     usage
     exit 3
 fi
 
-bmark_name=$1
-shift
-
 while test $# -gt 0
 do
    case "$1" in
@@ -55,23 +51,53 @@ work_dir=$PWD
 export OMP_NUM_THREADS=$num_threads
 mkdir -p ~/output
 
-if [ -z "$workload_num" ]; then
-    runscript="run.sh"
-    echo "Starting speed $bmark_name run with $OMP_NUM_THREADS threads"
-else
-    runscript="run_workload${workload_num}.sh"
-    echo "Starting speed $bmark_name (workload ${workload_num}) run with $OMP_NUM_THREADS threads"
-fi
+# Iterate through all subdirectories
+# Array to store background PIDs
+pids=()
+max_parallel=8
 
-# In some systems we might not support for our counter program; so optionally disable it 
-if [ -z "$DISABLE_COUNTERS" -a "$counters" -ne 0 ]; then
-    start_counters
-fi
+for bmark_dir in */; do
+    if [ -d "$bmark_dir" ]; then
+        bmark_name=${bmark_dir%/}  # Remove trailing slash
+        
+        if [ -z "$workload_num" ]; then
+            runscript="run.sh"
+            echo "Starting speed $bmark_name run with $OMP_NUM_THREADS threads"
+        else
+            runscript="run_workload${workload_num}.sh"
+            echo "Starting speed $bmark_name (workload ${workload_num}) run with $OMP_NUM_THREADS threads"
+        fi
 
-# Actually start the workload
-cd $work_dir/${bmark_name}
-./${runscript} > ~/output/${bmark_name}_${i}.out 2> ~/output/${bmark_name}_${i}.err
+        # In some systems we might not support for our counter program; so optionally disable it 
+        if [ -z "$DISABLE_COUNTERS" -a "$counters" -ne 0 ]; then
+            start_counters
+        fi
 
-if [ -z "$DISABLE_COUNTERS" -a "$counters" -ne 0 ]; then
-    stop_counters
-fi
+        # Actually start the workload
+        cd $work_dir/${bmark_name}
+        if [ -f "./${runscript}" ]; then
+            # Run in background and store PID
+            ./${runscript} > ~/output/${bmark_name}_${i}.out 2> ~/output/${bmark_name}_${i}.err &
+            pids+=($!)
+            
+            # If we've reached max parallel jobs, wait for one to finish
+            if [ ${#pids[@]} -eq $max_parallel ]; then
+                wait -n  # Wait for any job to finish
+                # Remove finished jobs from pids array
+                pids=( $(jobs -p) )
+            fi
+        else
+            echo "Warning: ${runscript} not found in ${bmark_name}"
+        fi
+
+        if [ -z "$DISABLE_COUNTERS" -a "$counters" -ne 0 ]; then
+            stop_counters
+        fi
+        
+        # Return to original directory for next iteration
+        cd $work_dir
+    fi
+done
+
+# Wait for remaining background jobs to finish
+wait
